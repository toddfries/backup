#!/bin/sh

# Copyright (c) 2001-2007 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

usage() {
	echo "Usage: $0 backupsetname newhostname"
	echo "Note: this is only for ssh host key generation"
}

if ! [ "$1" ]; then
	usage
	exit 2
fi

# backup directory
bkd="/etc/backup/$1"

if ! [ -d "$bkd" ]; then
	echo "$bkd directory does not exist!"
	exit 3
fi
if ! [ -f "$bkd/dumplist" ]; then
	echo "$bkd/dumplist file does not exist, creating"
	touch $bkd/dumplist
fi
if [ -f "$bkd/conf" ]; then
	. $bkd/conf
fi

if [ -d "$datadir" ]; then
	cd $datadir
else
	echo "$datadir in $bkd/conf does not exist!"
	exit 5
fi

if ! [ "$2" ]; then
	usage
	exit 6
fi

cd $bkd

if [ -f "${2}_sshkey" ]; then
	echo "Using existing $bkd/${2}_sshkey..."
else
	echo -n "ssh-keygen: generating new RSA host key... "
	if ssh-keygen -t rsa -b 4096 -f ${2}_sshkey -q -N ''; then
		echo done.
	else
		echo failed.
		exit 7
	fi
fi
# XXX warn if not already present
mkdir -p $datadir/$2
chown _backup._backup $datadir/$2 ${2}_sshkey
echo -n "Ok to ssh to $2 as root? "
read resp
case "$resp" in
[Yy]*)
	echo "\nSSH Session 1, add remote _backup user, prepare for key, nab IP.."
	ip="$(
		( set -x
		ssh -t root@$2 \
		    'useradd \
			-d /home/.backup -g=uid -m -s /bin/sh \
			-G operator _backup 2> /dev/null; \
		    cd ~_backup || exit; \
		    mkdir -p .ssh; \
		    :> .ssh/authorized_keys; \
		    chown -R _backup .ssh; \
		    who am i'
		) | \
		awk '/tty/ {sub("\\(","",$6);sub("\\)","",$6); print $6} \
			{next}' | \
		sed 's///g'
		# (sed is here to remove trailing newline, sigh)
	)"
	echo "ip=.${ip}."
	echo "\nSSH Session 2, authorized_hosts install"
	echo "no-pty,from=\"$ip\",no-port-forwarding,no-X11-forwarding,no-agent-forwarding $(cat ${2}_sshkey.pub)" | \
		ssh root@$2 'cat > ~_backup/.ssh/authorized_keys'

	echo "\nSSH Session 3, test key installation, dump /tmp as a test"
	su -m _backup -c "ssh -v -i $bkd/${2}_sshkey $2 /sbin/dump -0a -f - /tmp" > /dev/null
	;;
[Nn]*)
	echo
	echo "On the remote system, cut and paste the following:"
	echo ",-----"
	echo "cd ~backupuser;mkdir .ssh;cd .ssh"
	echo "uudecode"
	echo "no-pty,from=\"1.2.3.4\",no-port-forwarding,no-X11-forwarding,no-agent-forwarding $(cat ${2}_sshkey.pub)" | gzip -9 | uuencode authorized_keys.gz
	echo "gzip -d authorized_keys.gz"
	echo "\`-----"
;;
esac
echo "Example entry for $bkd/dumplist:"
echo "  sshdump://_backup@${2}/var"
