#!/bin/sh

# Copyright (c) 2012 Todd T. Fries <todd@fries.net>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

# The purpose of this script is to send to stdout the dumplist file
# format given a prefix for prepending a path if matched and if necessary
# a ssh host to connect to

# If a ssh host is given, it will follow the standard way that vault-backup
# does for keys and arguments etc

usage() {
	echo "vault-updatelist [-s [user@]sshhost] ] dumplist pattern pathpre"
	echo
	echo "For example:"
	echo
	echo "   vault-updatelist virtual '/var/virtual/*' dump://a.b.c.com"
	echo
	echo "   or"
	echo
	echo "   vault-updatelist -S MySet -s root@db1 db '/dbs/*.dbs' sshtar://root@db1"
}
sshcmdline() {
	local scmd="ssh $sshxtra" user="$1" host="$2" addr="$3"
	if [ "$thisaprog" != "none" ]; then
		scmd="$scmd -C"
	fi
	if [ -f $bkd/${host}_sshconfig ]; then
		scmd="$scmd -F $bkd/${host}_sshconfig "
	fi
	scmd="$scmd -i $bkd/${host}_sshkey "
	if ! [ "$host" = "$addr" ]; then
		scmd="$scmd -o hostkeyalias=$host"
	fi
	if [ "$user" -a "$host" ]; then
		scmd="$scmd $user@$addr "
	else if [ "$host" ]; then
		scmd="$scmd $addr "
	fi; fi
	echo "$scmd"
}

if [ "$1" = "-s" ]; then
	sshxtra="-o BatchMode=yes -o ServerAliveInterval=3600 -o ServerAliveCountMax=23 -o TCPKeepAlive=no "
	sshinfo="$2"
	if [ "$(echo "$2" | grep "@")" ]; then
		sshhost=$(echo "$2"|sed 's/^.*@//')
		sshuser=$(echo "$2"|sed 's/@.*$//')
	else
		sshhost="$2"
		sshuser=""
	fi
	shift
	shift
	parsepattern() {
		local scmd=$(sshcmdline "$sshuser" "$sshhost" "$sshhost")
		$scmd echo "$pattern"
	}

else
	parsepattern() {
		echo $pattern
	}
fi
dumplist="$1"
pattern="$2"
pathpre="$3"
bkd=/etc/backup/"$dumplist"
for path in $(parsepattern)
do
	echo "$pathpre$path"
done
